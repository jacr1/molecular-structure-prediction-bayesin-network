install.packages("rattle", repos="http://rattle.togaware.com")
install.packages("rattle", repos="http://rattle.togaware.com",type="source")
library(mice)
library(rpart)
install.packages("rattle", repos="http://rattle.togaware.com",type="source")
library(rattle)
library(rpart.plot)
library(RColorBrewer)
install.packages('ggplot2’, ‘RGtk2’, ‘tidyr’, ‘dplyr’)
install.packages("rattle", repos="http://rattle.togaware.com",type="source")
install.packages('rpart.plot')
install.packages('RColorBrewer')
library(rattle)
library(rpart.plot)
library(RColorBrewer)
#-------------------------------------
## Fix the data, replacing missing values.
#-------------------------------------
RBSdata = read.table("dataset_modelling.csv", sep=",", header=T)
# Replaces NA values in good and bad column with zeros
RBSdata$GOOD[RBSdata$GOOD == "."] <- 0
RBSdata$GOOD[is.na(RBSdata$GOOD)] <- 0
RBSdata$BAD[RBSdata$BAD == "."] <- 0
RBSdata$BAD[is.na(RBSdata$BAD)] <- 0
# Compares good and bad column,
# returns column name of the max or na if equal
EvaluateGoodBadColumn <- function(x){
if (x[1] == 0 && x[2] == 0){
return(NA)
}
return(names(RBSdata)[which.max(x)+1])
}
RBSdata$outcome <- apply(RBSdata[2:3], 1, EvaluateGoodBadColumn)
RBSdata <- RBSdata[,-c(2:3)]
head(RBSdata)
RBSdata[RBSdata == "."] <- NA
RBSdata[RBSdata == ""] <- NA
md.pattern(RBSdata)
cleanRBSdata <- na.omit(RBSdata)
md.pattern(cleanRBSdata)
fit <- rpart(outcome ~ disp_income + cust_age + res_indicator,
data=cleanRBSdata,
method="class")
fancyRpartPlot(fit)
text(fit)
install.packages("RColorBrewer")
install.packages("ggplot2", "RGtk2", "tidyr", "dplyr")
install.packages("rattle", dependencies = TRUE)
install.packages("arules")
install.packages("plotly")
install.packages("plotly", dependencies = TRUE)
install.packages("httr")
install.packages("httr", dependencies = TRUE)
install.packages("curl", dependencies = TRUE)
install.packages("rattle", dependencies = TRUE)
install.packages("rattle", dependencies = TRUE)
install.packages("rattle", dependencies = TRUE)
setwd("~/cs4099/structure-prediction-sh/study-data")
data = read.csv("final-data.csv", sep=",", head=TRUE)
data$time_taken <- period_to_seconds(hms(data$time_taken))
library(lubridate)
data$time_taken <- period_to_seconds(hms(data$time_taken))
data$prediction_type <- as.factor(data$prediction_type)
data$user_structure <- as.factor(data$user_structure)
data$smiles_length <- nchar(as.character(data$smiles))
data <- data[order(data$user_id, data$smiles),]
glm <- glm(formula = data$time_taken~data$predictions_used + data$prediction_type + data$smiles_length + data$rubs + data$undos + data$user_structure)
summary(glm)
regTermTest(glm)
?regTermTest
anova(glm)
regTermTest(glm)
regTermTest(glm, "predictions_used")
data(esoph)
model1 <- glm(cbind(ncases, ncontrols) ~ agegp + tobgp *
alcgp, data = esoph, family = binomial())
anova(model1)
regTermTest(model1,"tobgp")
